[{"id":0,"href":"/env-setup-workflow/docs/subject/","title":"Flowchart","section":"Docs","content":"Flowchart #  Below is my fully setup steps in workflow. Sadly, my workflow is not enough perfect, so it could not be a one-click installation. Even though it was not good as I expect, I still want to make it reusable and system consistency.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph TD A{Mac?} -- |Mac| B(\"Mac Manual Setup (Pre-processing)\") A{Mac?} -- |Linux| C(\"Linux Manual Setup (Pre-processing)\") B -- D(git clone env-setup-workflow) C -- D D -- E(rename_hostname.sh) E -- G(init zsh) subgraph phase1.sh G -- H(\"install homebrew | linuxbrew\") H -- I(brew bundle install) I -- |Linux| J(install linuxbrew not supported packages ex. unar\nand setup linux security setting) J -- K(install fzf keybinding, vim-plug, cheat.sh) I -- K end subgraph phase2.sh K -- |Mac, after dropbox was manual synced| L(mackup restore) K -- |Linux| M(chezmoi init --apply CaptainVincent \u0026\nrelink symbolic link) L -- N1(Install vim plugins) M -- N1 N1 -- N2(\"Install python packages/tools globally\") end N2 -- |Mac| O(\"Mac Manual Setup (Post-processing)\") N2 -- |Linux| P(\"Linux Manual Setup (Post-processing)\") "},{"id":1,"href":"/env-setup-workflow/docs/subject/manual/linux/","title":"Linux Manual Setup","section":"Manual Operations","content":"Pre-processing #  Change default user from ubuntu to any username #   You can choose the name to whatever you want\n  Reset the password of ubuntu if we don\u0026rsquo;t know ubuntu\u0026rsquo;s password  sudo passwd su passwd -d ubuntu exit passwd  Enable root login by ssh  sudo vim /root/.ssh/authorized_keys remove below line if root login is not allowed\nno-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=\u0026quot;echo 'Please login as the user \\\u0026quot;ubuntu\\\u0026quot; rather than the user \\\u0026quot;root\\\u0026quot;.';echo;sleep 10;exit 142\u0026quot;  Rename username from ubuntu to username after re-login as root first  sudo usermod --login username --home /home/vincent -m ubuntu Add swap space for VPS through script #  sudo chmod 500 setupSwap* sudo ./setupSwap.sh Post-processing #  Change ssh port #  sudo vim /etc/ssh/sshd_config sudo ufw enable sudo ufw allow 1985 sudo systemctl restart ssh.service "},{"id":2,"href":"/env-setup-workflow/docs/subject/scripts/rename_hostname/","title":"rename_hostname.sh","section":"scripts","content":"Usage #  Used to change VPS\u0026rsquo;s hostname to meaningful name. Make it easier to identify.\n"},{"id":3,"href":"/env-setup-workflow/docs/subject/manual/mac/","title":"Mac Manual Setup","section":"Manual Operations","content":"Preface #  Here list so many steps because I alway prefer clean reinstall my Mac and avoid use apple time machine. It is a painful process, but clean environment makes me feel less anxious.\nPre-processing #  Erase Mac before reinstall it #   Backup .zsh_history Cancel AppleMusic 授權 (max limit 10 devices, 5 desktops) logout iMessage logout iCloud (system preference \u0026gt; iCloud) logout App Store Reboot and press key \u0026ldquo;option\u0026rdquo;  Erase disk Install OSX from USB    Setup after reinstall #  辨識鍵盤 (系統主動, 外接鍵盤) 設定鍵盤  Option 與 Command Key 互換 (外接鍵盤)) 鍵盤 \u0026gt; 按鍵重複 快, 重複暫延 短 文字 \u0026gt; disable 自動大寫 and 加入全形句號 快速鍵  指揮中心 \u0026gt; 顯示通知中心 Cmd + Shit + \u0026gt; 輸入方式 \u0026gt; 選擇上一個 Cmd + Space, disable Next 停用 Spotlight 的快速鍵 (與 Alfred 習慣的快速鍵衝突)   輸入方式 \u0026gt; disable 使用大寫鎖定切換 ABC 與目前輸入方式 defaults write -g ApplePressAndHoldEnabled -bool false  關閉 key 按壓連續輸入被限制的設定, need relogin\n  停用 Text 連續兩個 space 被替換成 dot (Add period with double-space)  not exist anymore?\n  全面鍵盤操控 (鍵盤) (not exist anymore?)   觸控式軌跡板  點按  點一下來選按 靜音點按 (? 用途不明)   更多手勢  App Expose     輔助使用中 \u0026gt; 指標控制 \u0026gt; 觸控式軌跡板選項 \u0026gt; 啟用拖移 | 帶拖移鎖定 使用者與群組 \u0026gt; 設定帳戶頭像  將圖片直接拖曳到原始頭像上即可覆蓋, (Option) 可以一併同時把登入畫面改成直接輸入密碼, 不用等待選取使用者\n  Internet 帳號  iCloud  iCloud雲疊 照片 郵件 聯絡人 行事曆 提醒事項 Safari 備忘錄 Siri 鑰匙圈 尋找我的Mac 股市 家庭   Google (option, 工作用的電腦有加入公司行事曆)   Finder Preference  一般  桌面顯示 disable 外接硬碟, CD、DVD and iPod 開啟新的 finder 視窗在 下載項目   側邊欄  disable 最近項目, 硬碟, 最近使用過的標記 enable $HOME   進階  enable 顯示所有副檔名 disable 改變副檔名前顯示警告     Docker 與選單列  Dock enable 放大 and 自動隱藏及顯示Dock, disable 顯示最近使用過的應用程式 藍芽 在選單列中顯示 聲音 在選單列中顯示 永遠 時鐘 disable 顯示星期, 顯示日期, 顯示上午/下午 (只要勾選數位) Spotlight disable 在選單中顯示   Misc  隱私 \u0026gt; 進入睡眠立即鎖定 一般  enable 關閉文件時詢問保留 disable 結束 App 時關閉視窗 最近使用過的項目 無   聲音 \u0026gt; 音效 \u0026gt; 調整提示音音量至最小   從 iMessage 中打開 sync from iCloud 的選項 reverse Erase Mac action  Post-processing #   Copy or merge .zsh_history from old computer Point alfred preference to Dropbox and enable powerpack Install Smooze (mouse only) Install fonts if iterm2 font not display normal with p10k  brew tap homebrew/cask-fonts brew install install font-hack-nerd-font  If iterm2 has tab style setting (Because Catalina preference not match with Big Sur)  https://felixjung.io/blog/posts/pretty-iterm2-with-a-modern-titlebar\n  Install sublime package control  cmd+shift+p type :Install Package Control first and press enter and wait all plugins all installed\n   Exist issues #   Overwrite Zotero with darktheme (should be auto) brave not sync yet   Options #  Enable third-party app #  sudo spctl --master-disable // 開啟 app 安裝第三方的選項 sudo xattr -r -d com.apple.quarantine `app path` // 用拖拉至 terminal 即可, 移除 App 附加屬性 xattr -cr xxx.app // 如果上面方法失效的話可用此移除 binary 的全部附加屬性 Enable aptX codec #  sudo defaults write bluetoothaudiod \u0026#34;Enable AptX codec\u0026#34; -bool true // Enable Aptx Homebrew temp folder #   Manual clean temp folder\n  $HOME/Library/Caches/Homebrew/ $HOME/Library/Caches/Homebrew/Cask  Homebrew cask 實際安裝路徑 #   Manual remove app if it\u0026rsquo;s not cleaned up\n  /usr/local/Caskroom/  Update homebrew installed tools #  brew cu --all brew cu -facy brew upgrade 總是顯示 localhost 在 zsh 上 #  comment ~/.p10k.zsh below line for always show context prompt (Option)\n# typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION= pmset.config #  save mac power\nxcode theme #  https://github.com/hdoria/xcode-themes\n 目前已經匯入完成, mackup 應該要會自動備份不用再重新安裝\n Unknown section #  `CFLAGS=\u0026quot;-I$(brew \u0026ndash;prefix readline)/include -I$(brew \u0026ndash;prefix openssl)/include -I$(xcrun \u0026ndash;show-sdk-path)/usr/include\u0026quot; \\ ~ LDFLAGS=\u0026quot;-L$(brew \u0026ndash;prefix readline)/lib -L$(brew \u0026ndash;prefix openssl)/lib\u0026quot;\nPYTHON_CONFIGURE_OPTS=\u0026ndash;enable-unicode=ucs2\npyenv install -v 3.8.0\n"},{"id":4,"href":"/env-setup-workflow/docs/subject/scripts/phase1/","title":"phase1.sh","section":"scripts","content":"Usage #   More detail could reference to Followchart and I consider moving it into chezmoi\u0026rsquo;s bootstrap.\n For example.\n Install zsh Install homebrew | linuxbrew and bundle install packages other setting  "},{"id":5,"href":"/env-setup-workflow/docs/subject/scripts/phase2/","title":"phase2.sh","section":"scripts","content":"Usage #   More detail could reference to Followchart and I consider moving it into chezmoi\u0026rsquo;s bootstrap.\n After sync Dropbox or git clone dotfiles to local, we can use mackup or chezmoi restore our environment.\n"},{"id":6,"href":"/env-setup-workflow/docs/subject/scripts/install_python_global/","title":"install_python_global.sh","section":"scripts","content":"Usage #  Install python packages/tools globally through pipx.\n"},{"id":7,"href":"/env-setup-workflow/docs/subject/scripts/install_npm_global/","title":"install_npm_global.sh","section":"scripts","content":"Usage #  Install npm packages globally.\n"},{"id":8,"href":"/env-setup-workflow/docs/subject/manual/","title":"Manual Operations","section":"Flowchart","content":"Manual operation #  As an end user usually still has some instructions have to be manually executed on different devices. So here I list two manual operation chapters I used to setup for my Linux and Mac machines. I separate each file into two parts are pre-processing and post-processing respectively.\n You don\u0026rsquo;t need to follow my all instructions. I just let you know my workflow whole detail.\n "},{"id":9,"href":"/env-setup-workflow/docs/subject/scripts/relink_chezmoi2mackup/","title":"relink_chezmoi2mackup.sh","section":"scripts","content":"Usage #   Reference to Dotfiles Repo\n According my dotfiles are used by mackup, too. And mackup will make them as symbolic links in $HOME path, so I can\u0026rsquo;t directly add them into chezmoi.\n My workaround is add symbolic link and physical file both into chezmoi, and recover all symbolic links on apply target machine.\n First, add symbolic link and physical file both into chezmoi\nFor example:\nchezmoi add ~/.zshrc $(readlink ~/.zshrc) And then I sed all symbolic link paths from absolute path to relative path follow below command\n This step is because the symbolic links be joined chezmoi could be point different $HOME path every machine even we use the same username (ex. Linux and Mac use different path)\n chezmoi cd find . -name \u0026#39;symlink*\u0026#39; -print0 | xargs -0 sed -i \u0026#34;\u0026#34; \u0026#34;s|${HOME//\\//\\\\/}|\\$HOME|g\u0026#34; Finally, use this script relink_chezmoi2mackup.sh relink to the real home path on apply target\n Because chezmoi not support $HOME env variable as I think, so I need relink it.\n #!/bin/bash # Proper header for a Bash script. for filename in $(find . -type l ! -exec test -e {} \\; -print) ; do path=$(ls -l $filename | sed \u0026#34;s/.*\u0026gt;\\ \\(.*\\)/\\1/\u0026#34;) new=$(echo $path | sed \u0026#34;s|\\$HOME|${HOME}|g\u0026#34;) ln -sf $new $filename done "},{"id":10,"href":"/env-setup-workflow/docs/subject/scripts/setupswap/","title":"setupSwap","section":"scripts","content":"The Setup Swap Bash script does the following #   Remove the existing swap file (if it exists). Determine the available memory on the Linux instance and calculate the correct swap size.  Rules  less than 2 Gb RAM – swap size: 2 x the amount of RAM more than 2 GB RAM, but less than 32 GB – swap size: 4 GB + (RAM – 2 GB) 32 GB of RAM or more – swap size: 1 x the amount of RAM     Create the new swap file.   Source code : https://anto.online/code/bash-script-to-create-a-swap-file-in-linux/\n "}]